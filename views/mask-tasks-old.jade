extends layout

block content
    link(rel='stylesheet', href='/stylesheets/jquery-ui.min.css')
    link(rel='stylesheet' href='/stylesheets/messages.css')
    link(rel='stylesheet' href='/stylesheets/jquery.splitter.css')
    script(src='/javascripts/jquery-3.2.1.min.js')
    script(src='/javascripts/jquery-ui.min.js')
    script(src='/javascripts/messages.js')
    script(src='/javascripts/jquery.splitter-0.14.0.js')
    script.
        $(document).ready(function() {
            var reload = location.reload.bind(location)
            $('.taskSet').click(function() {
                $.get('/su/mask-task-set', { taskSet: $(this).next().text(), enable: this.checked } )
                    .fail(msg.ajaxError)
                    .done(reload)
            })
            $('.taskCheck').click(function() {
                $.get('/su/mask-task', { task: $(this).next().text(), enable: this.checked } )
                    .fail(msg.ajaxError)
                    .done(reload)
            })
            var timeoutId
            function loadPreview(a) {
                timeoutId = undefined
                $('a.preview').parent().removeClass('current-preview')
                $(a).parent().addClass('current-preview')
                $('#link-preview').attr('src', a.href)
            }
            $('a.preview')
                .mouseenter(function() {
                    timeoutId = setTimeout(loadPreview.bind(null, this), 500)
                    })
                .mouseleave(function() {
                    if (timeoutId !== undefined)
                        clearTimeout(timeoutId)
                })
            $('#main').split({
                orientation: 'horizontal',
                limit: 20,
                position: '50%', // if there is no percentage it interpret it as pixels
            })
        })
    style.
        .taskContainer, .tagContainer {
            padding-left: 2em;
            display: flex;
            flex-wrap: wrap;
        }
        .task, .taskTag {
            padding-right: 2em;
            display: flex;
        }
        .info {
            display: none;
        }
        #main {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        #alltasks {
            position: fixed;
            overflow: auto;
        }
        #alltasks div {
            padding-left: 3em;
        }
        /*
        #alltasks {
            position: fixed;
            top: 0;
            left: 3em;
            right: 0;
            height: 55%;
            overflow: auto;
        }
        #link-preview {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 45%;
        }
        */
        #link-preview {
            width: 100%;
            height: 100%;
            border: none;
            transform: scale(1.0);
            transform-origin: 0 0;
        }
        .task {
            border: 1px solid #fff;
            border-radius: 3px;
        }
        .current-preview {
            background-color: #eee;
            border: 1px solid #ddd;
        }
    #main
        #alltasks
            #hdr
                h1 Доступные задания
                p новых: #{taskStats.unchosen}, нерешённых: #{taskStats.abandoned}, решённых: #{taskStats.solved}, решают сейчас: #{taskStats.inprogress}
            //- #tags
            //-     h1 Теги
            //-     div.tagQuery
            //-     .tagContainer
            //-         each tag in allTasks.taskTags()
            //-             .taskTag= tag
            #tasks
                //- h2 Задачи
                each taskSet, taskSetId in taskSets
                    div
                        div.taskSetContainer
                            input.taskSet(type='checkbox' checked=sd.data.taskSetStatus(taskSetId)==='enabled')
                            span= taskSetId
                            span= ': ' + allTasks.taskSetDescription(taskSetId)
                        .taskContainer
                            each taskId in taskSet
                                .task
                                    input.taskCheck(type='checkbox' checked=!sd.data.taskStatus(taskId).blocked)
                                    span.info= taskId
                                    - var taskStatusFormatted = sd.data.taskStatusFormatted(taskId)
                                    a.preview(href='/su/task?task='+taskId target='_blank')= taskId.replace(taskSetId+':', '') + (taskStatusFormatted? ': ' + taskStatusFormatted: '')
        iframe#link-preview
