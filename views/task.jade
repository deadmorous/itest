extends layout

block content
    link(rel='stylesheet', href='/stylesheets/jquery-ui.min.css')
    link(rel='stylesheet' href='/stylesheets/messages.css')
    link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.11.0/katex.min.css')
    script(src='/javascripts/jquery-3.2.1.min.js')
    script(src='/javascripts/jquery-ui.min.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.11.0/katex.min.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.11.0/contrib/auto-render.min.js')
    script(src='/javascripts/messages.js')
    script.
        $(document).ready(function() {
            function cssToPixel(element, cssProp) {
                return +(element.css(cssProp).replace(/[^0-9]*$/, ''))
            }
            var aux = $('#aux').html(Array(78).fill('0').join('') + Array(23).fill('0<br/>').join(''))
            var charWidth = aux.width() / 79
            var charHeight = aux.height() / 23
            var currentWidth
            var currentHeight
            function loadOutput(dst) {
                var stdin = $('#stdin')
                var param = {width: currentWidth, height: currentHeight, taskId: '#{taskId}'}
                if (stdin.length > 0)
                    param.stdin = stdin.val()
                $.get('/task-output', param)
                    .done(function(d) {
                        d = JSON.parse(d)
                        var w = d.width,   h = d.height
                        let transformData = {
                            stdout: s => s.replace(/\n/g, '<br/>').replace(/ /g, '&nbsp;'),
                            staticHtml: s => `<iframe src="/task-doc/${s}"></iframe>`
                        }
                        dst.find('.console-data').html(transformData[d.dataType](d.data))
                        $('#console-size').text(w + ' x ' + h)
                    })
                    .fail(msg.ajaxError)
            }
            var console = $('.console')
            console.width(aux.width()+1)
                .height(aux.height())
                .resizable({
                resize: function(e, ui) {
                    ui.size.width = Math.round(ui.size.width/charWidth)*charWidth + 1
                    ui.size.height = Math.round(ui.size.height/charHeight)*charHeight
                },
                stop: function(e, ui) {
                    currentWidth = Math.round(ui.size.width/charWidth)
                    currentHeight = Math.round(ui.size.height/charHeight)
                    loadOutput($(this))
                }
            })
            currentWidth = aux.width()/charWidth
            currentHeight = aux.height()/charHeight
            loadOutput(console)

            $('#apply-stdin').click(function() {
                var cd = console.find('.console-data')
                loadOutput(console)
            })

            $('#upload-result').click(function() {
                var text = $('#student-result').val()
                if (!text)
                    return msg.error('Слишком мало букв!')
                $.post('/upload-result', { result: text, taskIndex: '#{teamTaskIndex}' })
                    .done(msg.info.bind(this, 'Текст отправлен на сервер'))
                    .fail(msg.ajaxError)
            })
            $('#confirm-logout').dialog({
                autoOpen: false,
                resizable: false,
                height: "auto",
                width: 400,
                modal: true,
                buttons: {
                    "Да, выйти": function() {
                        location.href = '/logout'
                    },
                    "Отмена": function() {
                        $(this).dialog('close')
                    }
                }
            })
            $('#logout').click(function() {
                $.get('/logout-warning-message')
                    .done(function(d) {
                        $('#logout-warning-message').text(d)
                        $('#confirm-logout').dialog('open')
                    })
                    .fail(msg.ajaxError)
            })

            $('.render-tex').each(function() {
                renderMathInElement( this, {
                    delimiters: [
                        {left: "$$", right: "$$", display: true},
                        {left: "\\[", right: "\\]", display: true},
                        {left: "$", right: "$", display: false},
                        {left: "\\(", right: "\\)", display: false}
                    ]
                })
            })
        })
    if task.options().noscroll
        style.
            .console-data-scroller {
                overflow: hidden;
            }
    else
        style.
            .console-data-scroller {
                overflow: auto;
            }
    if task.options().noscreensize
        style.
            #console-size {
                display: none;
            }
    style.
        .black {
            color: #fff;
            background-color: #000;
        }
        .monospace {
            font-family: courier;
            font-size: 16px;
        }
        .console-pad {
            padding: 0.3em;
        }
        .console-data-scroller {
            width: 100%;
            height: 100%;
        }
        .zero-size {
            width: 0;
            height: 0;
            overflow: hidden;
            position: absolute;
        }
        p, .render-tex {
            font-size: 16px;
        }
        h1 {
            font-size: 20px;
        }
        #stdin-block p:first-child {
            margin-bottom: 3px;
        }
        #stdin-block {
            margin-bottom: 10px;
        }
        .win {
            font-size: 200%;
            color: #0a0;
        }
        textarea {
            width: 100%;
        }
        .team-summary {
            font-weight: bold;
            color: #644;
        }
        .task-links {
            padding-left: 0;
        }
        .task-links li {
            display: inline;
            margin-right: 1em;
        }
        .console-data > iframe {
            position: absolute;
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
            border: none;
        }
    if team
        p.team-summary= team.summary()
        if maxTasks > 1
            ul.task-links
                - var otherTaskIndex = 0
                while otherTaskIndex < maxTasks
                    if otherTaskIndex == teamTaskIndex
                        li Задача #{otherTaskIndex+1}
                    else
                        li: a(href="?taskIndex=#{otherTaskIndex}") Задача #{otherTaskIndex+1}
                    - ++otherTaskIndex
        if team.tasks[teamTaskIndex].solved
            p.win Задача решена!
    h1 Вариант #{taskId}
        if !allowUpload
            | &nbsp; (теги: #{task.tags().join(', ')})
    .render-tex!= task.text()
    if task.stdin() !== undefined
        #stdin-block
            p Стандартный ввод:
            if task.stdinHint()
                p.render-tex!= task.stdinHint()
            textarea#stdin= task.stdin()
            br
            input#apply-stdin(type='button' value='Применить')
    #console-size
    .console.black.monospace.console-pad
        .console-data-scroller
            .console-data
    .zero-size
        span#aux.monospace
    if allowUpload
        h1 Сюда можно скопипастить работающую программу
        textarea#student-result
        br
        input#upload-result(type='button' value='У меня получилось!')
        br
        input#logout(type='button' value='Выйти')
        #confirm-logout(title="Выйти из системы?")
            p#logout-warning-message
